1-	What is a class?

	Class:

		Collection of Students + Chairs + Others ==> Grouping something
		
		Family ==> Family Members + Others
		
		Class ==> Properties + Methods
		
		Class ==> Methods
		
		Class ==> Properties
		
		
		Class ==> Variables + functions
		
		House ==> Class
		
		Product
		Register
		
		Employee
			- adding
			- view
			- delete
			- update
			
		class <class-name> {
			properties
			methods
		}
	
=====================================================================================================================================================

2-	What is an object? | Static and Non-Static Members

		How can we access the Class members?
		By creating an Object
		
		What is an Object?
		An Object is an Instance of a Class, it's like a blueprint of a Class
		
		What is meant by instance of a class?
		Allocating memory to the Class members is called instance of a Class
		
		Creating Object
		new operator, we can create an Object:		$variable = new <ClassName>();

		
		
		Static members
		The Class members which are created with Static keyword are called Static members
		
		Non-Static members
		The Class members which are not created with Static keyword are called
		Non-Static members
		
		How can we access Static members of a Class?
		Using Class name with Scope Resolution Operator (::)
		
		
		
		Scope Resolution Operator (::)
		
		By this operator, it's possible to access Static members of a Class,
		Constants of a Class.
		
		<ClassName>::CONSTANT_NAME

		
		
		Static Variables => ClassName
		Non-Static Variables => Object
		
		Static Methods => ClassName or Object
		Non-Static Methods => ClassName or Object
	
=====================================================================================================================================================

3-	$this keyword in PHP | self:: keyword

	$this
		Always refers the current Class Object
		Scope - inside of a class only
		Using $this, you can only access non-static members of a class only
		
		$this ==> non-static
		
		
	self::
		Scope - inside of a class only
		Using self::, you can only access static members of a class only
		
		self:: ==> only static
	
=====================================================================================================================================================

4-	Constructor and Destructor in PHP || 5-	Examples using Constructor and Destructor

	Constructor and Destructor

		Default:
		
		public function __construct(){ connected to DB }
		public function __destruct(){ close DB }
		
		The construct function gets called automatically at the time of Object creation.
		The destruct function gets called automatically at the time of class execution completed.
	
=====================================================================================================================================================

6-	Inheritance in PHP

	Inheritance

		Inheritance is the process of sharing the Base Class members into the Sub Classes
		Inheritance is implemented by using "extends" keyword
		
		Parent Class and Child Class
		
		Base Class and Sub Class

=====================================================================================================================================================

7-	Model View Controller MVC

	MVC Architecture

		MVC is a design pattern, which is used to organize the code into a structured manner

		Presentation Logic = HTML CSS

		Business Logic = PHP & MySQL

		The main GOAL of MVC Architecture is sepaating the Presentation Logic with Business Logic

		MVC - Model View Controller

			Model:
				A Model is a class file. A model always deals with database operations

				Models:
					- register.php
					- login.php

			View:
				A View is also a file which contains Presentation Logic

				Views:
					- register.php
					- login.php

			Controller:
				The Controller is THE HEART of MVC Architecture. In MVC, each and every request will be handled by the Controller only.

		register.php
			HTML
			CSS
			JS
			PHP & MySQL

=====================================================================================================================================================

8- CodeIgniter 3 setup

	$this keyword

	inheritance

		MVC Architecture

	What is a framework?

		A framework is created by using a programming language
		
			CodeIgniter => PHP
			Laravel => PHP
			ZEND => PHP
			CakePHP => PHP
			
			PHP: by using this we can develop web applications
			CodeIgniter: by using this we can develop web applications
			
			validate email / mobile in php = 10 ~ 15 lines
			validate email / mobile in framework = 1 line
			
			
		CI3
			
		CI4
			
			Concise code => Reduce the number of ilnes of 
			
			
			
			
		XAMPP tool
		
			htdocs
			
			
			
		Cache
			Config => Heart of CI3
			Helpers
			Libraries => Some predefined classes + our own classes
			Models
			Views
			Controllers
		
=====================================================================================================================================================

9-	CodeIgniter 3 URLs

	Types of URLs:
	
		Query string based URLs:				http://example.com/test.php?id=1&name=ram
		
		Segment based URLs:		/segment/		http://example.com/test/1/ram
												http://example.com/news/article/my_article
			
			example.com			= domain
			test / news			= segment1 <-------- Controller
			1 / article			= segment2 <-------- Method or Function
			ram	/ my_article	= segment3 <-------- Parameter to the methods
			
			
		class News {
			function article(my_article) {
				// some logic
			}
			
			function test() {
				// some logic
			}
		}

=====================================================================================================================================================

10-	Controllers in CodeIgniter 3 Part 1

	A controller is a class file which contains methods
		http://localhost/<project-folder>/Controller-Class/Method-inside-Controller
	
	Each and every controller class will be saved in: Application/Controllers
	
	Class name and File name should be matched:
		Class Employee { ... }
		Employee.php
		
	Class name should start wih Capital Letter:
		Class Employee { ... }
		
	Each and every controller class should extends with a base class called CI_Controller
		
		
		
	HTACCESS
		code:
			RewriteEngine On
			RewriteCond %{REQUEST_FILENAME} !-f
			RewriteCond %{REQUEST_FILENAME} !-d
			RewriteRule ^(.*)$ index.php/$1 [L]
		
		location to save the file: htdocs/<project-folder>/.htaccess

=====================================================================================================================================================

11-	Controllers in CodeIgniter Part 2 | Remapping method Calls

	public function _remap($method/$action) {
		if ($method/$action === 'some_method/some_action') {
			$this -> $method()/$action();
		}
		else {
			$this ->default_method();
		}
	}

=====================================================================================================================================================

12-	Views in CodeIgniter 3 || 13-	Loading views in controller

	Views
		Part where uses HTML, CSS, Bootstrap
		Each and every view class will be saved in: Application/Views
		
	How can we load a view into Controller?
		code:
			$this->load->view("<view-file-name>");

=====================================================================================================================================================

14-	Models in CodeIgniter | What is a Model | How to load a Model into a Controller

	Models
		A model always deals with db data
		A model is a class file
		Each and every model class will be saved in: Application/Models
		Model class name and file name must be matched.			Class Employee { ... }		Employee.php
		Class name should start wih Capital Letter:				Class Employee { ... }
		Each and every model class should extends with a base class called CI_Model
	
	How can we load a model into Controller?
		code:
			$this->load->model("<model-file-name>");
	
=====================================================================================================================================================

15-	View Controller Model Communication
		
	Interactions in MVC:
		
		From Model:		Model (Data) => Controller => View
		From View:		View (Data) => Controller => Model
		
		Model and View don't communicate directly with each other, They use Controller as Intermediary for communication

=====================================================================================================================================================

16-	Helpers in CodeIgniter | Loading Helpers into Controllers	||  17-	Working with Helpers

	Helpers in CodeIgniter
		
		What is a helper?
			A helper is a collection of methods
			
		Helper class usually are saved in: Application/helpers or in system/helpers
		
		
	
	How can we load a helper into Controller?
		code:
			$this->load->helper("<helper-file-name>");
			
			
	How to define a base URL: <project-folder>/Application/config/config.php
	In the command ----->	$config['base_url'] = '';
	You can write the address to be defined as base URL	

=====================================================================================================================================================

18-	Libraries in CodeIgniter

	A library is a class file
	A helper is a function
	
	code:
		
		Welcome library class
			test()
			hi()
			sample()
		
			$this->load->helper("<helper-file-name>");
			$this->load->view("<view-file-name>");
			$this->load->model("<model-file-name>");
			
			BlogModel
				- getAllBlogs()
				
			$this->load->model("BlogModel");
			
			$this->BlogModel->getAllBlogs();
			
			
			
		form_validation
		
			$this->load->library("name");
			
			$this->load->library("email");
			$this->load->library("upload");
			$this->load->library("pagination");
			
			$this->load->library(array("email","upload","pagination"));
			
			
			
		form_validation
			- run()
			- set_rules()
			
		----------------------------------------
		Loading libraries into controller
		----------------------------------------

		$this->load->library("form_validation");
		
		$this->form_validation->run();
		$this->form_validation->set_rules();

=====================================================================================================================================================

19-	Email Library in CodeIgniter

	$this->load->library("email");
	$this->load->to("destination_email");
	$this->load->subject("subject");
	$this->load->message("message");
	$this->load->cc("cc");
	$this->load->bcc("bcc");

=====================================================================================================================================================

20-	CodeIgniter 3 Form Validation

	Form validation
	
		-	set_rules()
		-	run()
		
		$this->load->library("form_validation");
		$this->form_validation->set_rules("name_input_field", "label_display_error_msg", "rules");
		
		rulse ex.:	required|min_length[3]|max_length[25]
		
		ex.:
			$this->form_validation->set_rules("name", "Name", "required|min_length[3]");
			$this->form_validation->set_rules("email", "Email", "required|valid_email");
			$this->form_validation->set_rules("mobile", "Moble", "required|numeric");
			
			
		echo form_error("name_input_field");

=====================================================================================================================================================

21-	Database Configuration in CodeIgniter 3

	Database Configuration
	
	-	database.php
	-	Config/Database.php
	
	Load database in Controller or Model:
	
		$this->load->database();
		
	-	Controller DB
		-	Model1
		-	Model2
		-	Model3
		
		mysqli_error($con);
		
		$this->db->query();
		$this->db->error();
		
		mysqli_fetch_row();
		mysqli_fetch_assoc();
		mysqli_fetch_array();
		mysqli_fetch_object():
		
		
		Fetching data from result set in CI
		------------------------------------
		
		result();
		result_object();
		result_array();
		
		row();
		row_object();
		row_array();

=====================================================================================================================================================

22-	Fetching data from table using MVC way

=====================================================================================================================================================

23-	QueryBuilder Class

=====================================================================================================================================================

24-	Registration form part1

=====================================================================================================================================================

25-	Registration form part2 | Saving data into a table

=====================================================================================================================================================

26-	Registration form with account activation process | Send an email to registered user

=====================================================================================================================================================

27-	Theme Integration in CodeIgniter

=====================================================================================================================================================

28-	Login Form Part1

=====================================================================================================================================================

29-	Login Form Part2

=====================================================================================================================================================

30-	Logout functionality

=====================================================================================================================================================

31-	Welcome profile of logged in user

=====================================================================================================================================================

32-	Change password

=====================================================================================================================================================

33-	Edit profile logged in user